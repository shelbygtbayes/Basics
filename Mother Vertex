#include<iostream>
#include<stdlib.h>
#include<climits>
#include<vector>
#include<unordered_map>
#include<stack>
using namespace std;
unordered_map<int , vector< int > > graph;
void addEdge(int u , int v)
{
    graph[u].push_back(v);
} 
void dfs(int node , vector<int> &vis)
{
    if(vis[node]) return;
    vis[node] = 1;
    for(auto v : graph[node])
    {
        if(!vis[v])
            dfs(v , vis);
    }
  
}
int mother_vertex(int n)
{
    vector<int> vis(n,0);
    int last_visited;
    for(int ind = 0 ; ind < n ; ind++)
    {
        if(!vis[ind])
        {
            last_visited = ind;
            dfs(ind , vis);
        }
    }
    for(int ind = 0 ; ind < n ; ind++)
        vis[ind] = 0;
    dfs(last_visited , vis);
    for(int ind = 0 ; ind < n ; ind++)
    {
        if(!vis[ind])
            return -1;
    }
    return last_visited;
}
int main()
{
    int n = 7;
    addEdge(0, 1); 
    addEdge(0, 2); 
    addEdge(1, 3); 
    addEdge(4, 1); 
    addEdge(6, 4); 
    addEdge(5, 6); 
    addEdge(5, 2); 
    addEdge(6, 0); 
    cout << mother_vertex(n);
    return 0;
}
