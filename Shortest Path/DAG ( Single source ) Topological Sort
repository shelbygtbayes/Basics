#include<iostream>
#include<stdlib.h>
#include<climits>
#include<vector>
#include<unordered_map>
#include<stack>
using namespace std;
unordered_map<int , vector< vector<int> > > graph;
void addEdge(int u , int v , int w)
{
    graph[u].push_back(vector<int>{v,w});
} 
void dfs(int node , vector<int> &vis , stack<int> &st)
{
    if(vis[node]) return;
    vis[node] = 1;
    for(auto edge : graph[node])
    {
        int v = edge[0];
        if(!vis[v])
            dfs(v , vis , st);
    }
    st.push(node);
}
vector<int> topological(int src , int n)
{
    vector<int> vis(n , 0);
    vector<int> dis(n , INT_MAX);
    dis[src] = 0;
    stack<int> st;
    for(int node = 0 ; node < n ; node++)
    {
        if(!vis[node])
            dfs(node , vis , st);
    }
    while (!st.empty())
    {
        int u = st.top();
        st.pop();
        if(dis[u] != INT_MAX)
        {
            for(auto edge : graph[u])
            {
                int v = edge[0] , w = edge[1];
                if(dis[v] > dis[u] + w)
                {
                    dis[v] = dis[u] + w;
                }
            }
        }
    }
    return dis;
    
}
int main()
{
    addEdge(0, 1, 5); 
    addEdge(0, 2, 3); 
    addEdge(1, 3, 6); 
    addEdge(1, 2, 2); 
    addEdge(2, 4, 4); 
    addEdge(2, 5, 2); 
    addEdge(2, 3, 7); 
    addEdge(3, 4, -1); 
    addEdge(4, 5, -2);
    int src = 1 , n = 6;
    vector<int> ans = topological(src , n);
    for(auto dis : ans)
    {
        (dis == INT_MAX) ? (cout << "INF ") : (cout << dis) << " ";
    }
    return 0;
}
